/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.90
 * Generated at: 2024-08-12 02:53:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("jar:file:/C:/fullstack/part4/src/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/20240812/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/C:/fullstack/part4/src/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/20240812/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1721118981403L));
    _jspx_dependants.put("jar:file:/C:/fullstack/part4/src/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/20240812/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("	font-family: Arial, sans-serif;\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	padding: 0;\r\n");
      out.write("	background-color: #f7f7f7;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".chat-container {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-direction: column;\r\n");
      out.write("	max-width: 400px;\r\n");
      out.write("	height: 100vh;\r\n");
      out.write("	margin: 0 auto;\r\n");
      out.write("	border: 1px solid #ddd;\r\n");
      out.write("	background-color: #fff;\r\n");
      out.write("	overflow: hidden;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".header {\r\n");
      out.write("	background-color: #fddc3f;\r\n");
      out.write("	color: black;\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	font-size: 18px;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".chat-area {\r\n");
      out.write("	flex-grow: 1;\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	overflow-y: auto;\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-direction: column;\r\n");
      out.write("	gap: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".message {\r\n");
      out.write("	max-width: 70%;\r\n");
      out.write("	padding: 8px 12px;\r\n");
      out.write("	border-radius: 20px;\r\n");
      out.write("	font-size: 14px;\r\n");
      out.write("	word-wrap: break-word;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".message.user {\r\n");
      out.write("	align-self: flex-end;\r\n");
      out.write("	background-color: #DCF8C6;\r\n");
      out.write("	color: black;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".message.other {\r\n");
      out.write("	align-self: flex-start;\r\n");
      out.write("	background-color: #ebebeb;\r\n");
      out.write("	color: black;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".input-area {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	border-top: 1px solid #ddd;\r\n");
      out.write("	background-color: #fff;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".input-area input[type=\"text\"] {\r\n");
      out.write("	flex-grow: 1;\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	border: 1px solid #ddd;\r\n");
      out.write("	border-radius: 20px;\r\n");
      out.write("	font-size: 14px;\r\n");
      out.write("	outline: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".input-area button {\r\n");
      out.write("	margin-left: 10px;\r\n");
      out.write("	padding: 10px 20px;\r\n");
      out.write("	background-color: #fddc3f;\r\n");
      out.write("	border: none;\r\n");
      out.write("	border-radius: 20px;\r\n");
      out.write("	font-size: 14px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script\r\n");
      out.write("	src=\"https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div class=\"chat-container\">\r\n");
      out.write("		<div class=\"header\">카카오톡</div>\r\n");
      out.write("\r\n");
      out.write("		<!-- 채팅 메세지 보여주는 공간 -->\r\n");
      out.write("		<div class=\"chat-area\" id=\"chatArea\"></div>\r\n");
      out.write("\r\n");
      out.write("		<!-- 채팅 입력 공간 -->\r\n");
      out.write("		<div class=\"input-area\">\r\n");
      out.write("			<input type=\"text\" id=\"chatInput\" placeholder=\"메시지 입력\">\r\n");
      out.write("			<button id=\"sendButton\">전송</button>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("		// 클라이언트에서 소켓 통신의 객체를 생성\r\n");
      out.write("		let socket = new WebSocket(\r\n");
      out.write("				\"ws://");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.serverName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(':');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.serverPort}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/myHandler\");\r\n");
      out.write("\r\n");
      out.write("		socket.onopen = function() {\r\n");
      out.write("			console.log(\"Connection Opened!\");\r\n");
      out.write("			// send() 메서드를 이용해서 괄호 안에 서버로 보낼 메세지를 입력한다.\r\n");
      out.write("			socket.send(\"hello server!\");\r\n");
      out.write("		};\r\n");
      out.write("\r\n");
      out.write("		// 서버로부터 메시지가 도착했을 때\r\n");
      out.write("		socket.onmessage = function(event) {\r\n");
      out.write("			console.log(\"응답  server: \" + event.data);\r\n");
      out.write("			displayMessage(event.data, 'other');\r\n");
      out.write("		};\r\n");
      out.write("\r\n");
      out.write("		// 웹 소켓 연결이 닫혔을 때 실행하는 함수\r\n");
      out.write("		socket.onclose = function() {\r\n");
      out.write("			console.log(\"Connection closed\");\r\n");
      out.write("		};\r\n");
      out.write("\r\n");
      out.write("		// 웹 소켓 연결시 에러가 발생했을 때 실행하는 함수\r\n");
      out.write("		socket.onerror = function(error) {\r\n");
      out.write("			console.log(\"Error: \" + error);\r\n");
      out.write("		};\r\n");
      out.write("\r\n");
      out.write("		// 요소값들을 가지고 오는 명령문\r\n");
      out.write("		const sendButton = document.getElementById('sendButton');\r\n");
      out.write("		const chatInput = document.getElementById('chatInput');\r\n");
      out.write("		const chatArea = document.getElementById('chatArea');\r\n");
      out.write("		\r\n");
      out.write("		// 버튼을 클릭했을 때 실행 이벤트\r\n");
      out.write("		sendButton.addEventListener('click', sendMessage);\r\n");
      out.write("		\r\n");
      out.write("		// 함수 정의하기\r\n");
      out.write("		function sendMessage() {\r\n");
      out.write("			// 1. 입력창에 있는 메세지 가져오기\r\n");
      out.write("			const messageText = chatInput.value.trim();\r\n");
      out.write("			\r\n");
      out.write("			// 2. 비어있으면 실행 안하고 메세지가 있으면 서버로 전송하기\r\n");
      out.write("			if(messageText !== '') {\r\n");
      out.write("				// 요소값을 대화창에 추가하는 메서드\r\n");
      out.write("				displayMessage(messageText, 'user');\r\n");
      out.write("				// 서버 전송\r\n");
      out.write("				socket.send(messageText);\r\n");
      out.write("				// 입력창 비우기\r\n");
      out.write("				chatInput.value='';\r\n");
      out.write("			}\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		// 대화창에 메세지 생성해서 출력하기\r\n");
      out.write("		function displayMessage(msg, type) {\r\n");
      out.write("			// 새로운 div 생성\r\n");
      out.write("			const msgDiv = document.createElement('div');\r\n");
      out.write("			// 클래스 이름 생성\r\n");
      out.write("			msgDiv.className = \"message \" + type;\r\n");
      out.write("			// 요소의 내용 저장\r\n");
      out.write("			msgDiv.textContent = msg;\r\n");
      out.write("			// 채팅창 chatArea 자식으로 추가하기\r\n");
      out.write("			chatArea.appendChild(msgDiv);\r\n");
      out.write("		};\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
