package com.ss.rest.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.ss.rest.dto.Cat;
import com.ss.rest.service.CatService;

//비동기 통신을 이용해서 데이터를 주고 받기 위해서 따로 작성한 것 뿐
@RequestMapping("/catWeb")
@RestController
public class CatRestForWebController {

	@Autowired
	private CatService service;

	@GetMapping("") // read할 때 사용하는 어노테이션
	public ResponseEntity<List<Cat>> getCatAllInfo(@RequestParam(name = "name", required = false) String name) {

		List<Cat> list = null;

		if (name == null) {
			list = service.selectAll();
		} else {
			list = service.selectByName(name);
		}
		
		return ResponseEntity.status(HttpStatus.OK).body(list);
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<Cat> getCatInfo(@PathVariable("id") int id) {
		System.out.println("비동기 통신 id: " + id);
		Cat cat = service.selectById(id);
		return ResponseEntity.status(HttpStatus.OK).body(cat);
	}
	
	// RequestBody: json 객체를 Cat으로 바꿔주는 어노테이션
	// - 파싱없이 json 객체를 java로 바꾼다.
	@PostMapping("") // create 전용 어노테이션
	public ResponseEntity<Cat> createCat(@RequestBody Cat requestCat) {
		System.out.println("비동기 통신 create(): " + requestCat);
		// 1. 서비스로 이동
		// 2. mapper를 이용해서 DB 호출
		// 3. sql 실행
		// 4. 저장되면 1이상 안되면 0이 온다
		// 5. 둘 중 하나를 선택
		// 	만약 저장이 잘 되면 cat 객체를 body 보내기 body 부분 지우기
		return null;
	}
	
	@PutMapping("/{id}")
	public ResponseEntity<Cat> updateCat(@PathVariable("id") int id, @RequestBody Cat updateCat) {
		
		return null;
	}
}
